---
// Hero Swiper using Swiper Element (no React needed)
// Props: screenshots: string[] (public paths), eager?: boolean
const { screenshots = [], eager = false } = Astro.props
---

<swiper-container
  class="hero-swiper no-scrollbar"
  slides-per-view="auto"
  space-between="32"
  grab-cursor="true"
  slides-per-group="1"
  speed="600"
  centered-slides="true"
  initial-slide="0"
>
  {screenshots.map((src: string, i: number) => (
    <swiper-slide>
      <div class="hero-slide">
        <img src={src} alt="Скриншот демо AI Hair Extension Bot" loading={(eager || i === 0) ? 'eager' : 'lazy'} fetchpriority={(eager || i === 0) ? 'high' : 'auto'} decoding="async" />
      </div>
    </swiper-slide>
  ))}
</swiper-container>

<style is:global>
  @import 'swiper/css';
  @import 'swiper/css/free-mode';
</style>

<style>
  .hero-swiper { @apply block w-full items-end; }
  swiper-slide { width: auto !important; }
  .no-scrollbar::-webkit-scrollbar { display: none; }
  .no-scrollbar { -ms-overflow-style: none; scrollbar-width: none; }
  .hero-slide {
    @apply inline-block h-[60vh] max-h-[640px] overflow-hidden rounded-t-2xl shadow-2xl shadow-neutral-200 dark:shadow-neutral-950;
  }
  .hero-slide img { @apply block h-full w-auto object-contain; }

  /* Scope overflow fix only to this hero swiper */
  .hero-swiper,
  .hero-swiper :is(.swiper, .swiper-wrapper, .swiper-slide),
  .hero-swiper swiper-slide {
    overflow: visible !important;
    will-change: transform, opacity;
    transform: translateZ(0);
  }
</style>

<script>
  import { register } from 'swiper/element/bundle'

  if (typeof window !== 'undefined') {
    if (!customElements.get('swiper-container')) register()

    type HeroSwiperElement = HTMLElement & {
      update?: () => void
      swiper?: {
        slideTo?: (index: number, speed?: number) => void
        slideNext?: (speed?: number) => void
        slidePrev?: (speed?: number) => void
        params?: Record<string, any>
        update?: () => void
        activeIndex?: number
        slides?: ArrayLike<any>
      }
      initialize?: () => void
    }
    const managed = new Set<HeroSwiperElement>()

    const updateAll = () => {
      managed.forEach((el) => el.swiper?.update?.())
    }

    const setupEl = (el: HeroSwiperElement) => {
      if (managed.has(el)) return
      managed.add(el)

      const ensureInitialState = () => {
        const swiper = el.swiper
        if (!swiper) return
        if (swiper.params) {
          swiper.params.speed = 600
          swiper.params.slidesPerGroup = 1
        }
        requestAnimationFrame(() => {
          swiper.update?.()
          swiper.slideTo?.(0, 0)
        })
      }

      if (!el.swiper && typeof el.initialize === 'function') {
        el.initialize()
      }

      if (el.swiper) {
        ensureInitialState()
      } else {
        const onReady = () => {
          ensureInitialState()
          el.removeEventListener('ready', onReady)
        }
        el.addEventListener('ready', onReady)
      }

      el.tabIndex = 0
      const getSlidesCount = () => el.querySelectorAll('swiper-slide').length
      const goNext = () => {
        const swiper = el.swiper
        if (!swiper) return
        const total = getSlidesCount()
        const current = swiper.activeIndex ?? 0
        if (total === 0) return
        if (current < total - 1) {
          swiper.slideNext?.(600)
        }
      }

      el.addEventListener('click', (e: MouseEvent) => {
        const t = e.target as Element | null
        if (t?.closest('a,button,[role="button"],input,textarea,select')) return
        goNext()
      })

      el.addEventListener('keydown', (e: KeyboardEvent) => {
        if (e.key === 'ArrowRight' || e.key === 'Enter' || e.key === ' ') {
          e.preventDefault()
          goNext()
        } else if (e.key === 'ArrowLeft') {
          e.preventDefault()
          el.swiper?.slidePrev?.(600)
        }
      })
    }

    const hydrateAll = () => {
      document
        .querySelectorAll<HeroSwiperElement>('swiper-container.hero-swiper')
        .forEach(setupEl)
      requestAnimationFrame(updateAll)
    }

    if (customElements.get('swiper-container')) {
      hydrateAll()
    } else {
      customElements.whenDefined('swiper-container').then(hydrateAll)
    }

    window.addEventListener('resize', () => {
      requestAnimationFrame(updateAll)
    })

    const win = window as typeof window & { __heroSwiperBound?: boolean }
    if (!win.__heroSwiperBound) {
      document.addEventListener('astro:page-load', hydrateAll)
      win.__heroSwiperBound = true
    }
  }
</script>
